wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
library("here")
source(here::here("Functions", "AffDysPattern_functions.R")
wd <- getwd()
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
library("here")
library("psych")
library("ggplot2")
library("effectsize")
library("lme4")
library("plyr")
library("meta")
library("metafor")
library("BayesFactor")
library("brms")
source(here::here("Functions", "AffDysPattern_functions.R"))
source(here::here(wd, "Functions", "AffDysPattern_functions.R"))
dfclin <- read.csv(wd, "Data", "clinicalPatternExpression", "EmoPattern_neuralData.csv")
dfclin <- read.csv(here::here(wd, "Data", "clinicalPatternExpression", "EmoPattern_neuralData.csv"))
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
# load packages
library("plyr")
library("readxl")
# load ewmt data
dfEwmtPines <- read.csv("Ewmtpines_neuro.csv")
dfEwmtMed <- read_excel("Medication_study3_ewmt.xlsx")
# load ewmt data
dfEwmt <- read.csv("Ewmtpines_neuro.csv")
dfEwmtMed <- read_excel("Medication_study3_ewmt.xlsx")
dfEwmtMed
# add study and run variables
dfEwmt$study <- rep("ewmt", nrow(dfEwmt))
dfEwmt$run <- rep(1, nrow(dfEwmt))
dfEwmt$rundescr <- rep("only_run", nrow(dfEwmt))
dfEwmt
# add group variables
group <- substr(dfEwmt$ID, 1, 1)
group <- ifelse(group == 3, 1, group)
group <- ifelse(group == 1, "PTSD", ifelse(group == 2, "TC", "HC"))
dfEwmt$group <- group
dfEwmt
# add medication
dfEwmtMed$ID <- ifelse(substr(dfEwmtMed$ID, 4, 4) == "0",
paste(substr(dfEwmtMed$ID, 3, 3), substr(dfEwmtMed$ID, 5, 6), sep = ""),
paste(substr(dfEwmtMed$ID, 4, 4), substr(dfEwmtMed$ID, 5, 6), sep = ""))
dfEwmtMed$med_bin <- apply(dfEwmtMed[, -1], 1, function(x){if(any(x == 1)){1}else{0}})
dfEwmt <- merge(dfEwmt, dfEwmtMed[, c("ID", "med_bin")], by = "ID", all.x = T)
# remove study from pines variable name
names(dfEwmt)[2:3] <- c("NegPines", "NeutPines")
# create anonynomous ID
dfEwmt$ID <- c(1:nrow(dfEwmt))
dfEwmt
# load data
dfEmoregAG <- read.csv("EmoAGqpinesModel7_neuro.csv")
# load data
dfEmoregAG <- read.csv("EmoAGqpinesModel7_neuro.csv")
dfEmoregMed <- read_excel("Medikation_study1_emoreg.xlsx")
# add study and run variables
dfEmoregAG$study <- rep("emoreg", nrow(dfEmoregAG))
dfEmoregAG$run <- rep(1, nrow(dfEmoregAG))
dfEmoregAG$rundescr <- rep("AG", nrow(dfEmoregAG))
# add group variables
dfEmoregAG$group <- ifelse(substr(dfEmoregAG$ID, 2, 2) == 0, "HC", "BPD")
# remove study from pines variable name
names(dfEmoregAG)[2:3] <- c("NegPines", "NeutPines")
dfEmoregAG
# load data
dfEmoregRAPines <- read.csv("EmoRAqpinesModel7_neuro.csv")
# add study and run variables
dfEmoregRA$study <- rep("emoreg", nrow(dfEmoregRA))
dfEmoregRA$run <- rep(2, nrow(dfEmoregRA))
dfEmoregRA$rundescr <- rep("RA", nrow(dfEmoregRA))
# load data
dfEmoregRA <- read.csv("EmoRAqpinesModel7_neuro.csv")
# add study and run variables
dfEmoregRA$study <- rep("emoreg", nrow(dfEmoregRA))
dfEmoregRA$run <- rep(2, nrow(dfEmoregRA))
dfEmoregRA$rundescr <- rep("RA", nrow(dfEmoregRA))
# add group variables
dfEmoregRA$group <- ifelse(substr(dfEmoregRA$ID, 2, 2) == 0, "HC", "BPD")
# remove study from pines variable name
names(dfEmoregRA)[2:3] <- c("NegPines", "NeutPines")
dfEmoregRA
# load data
dfEmoregSR <- read.csv("EmoSRqpinesModel7_neuro.csv")
# add study and run variables
dfEmoregSR$study <- rep("emoreg", nrow(dfEmoregSR))
dfEmoregSR$run <- rep(3, nrow(dfEmoregSR))
dfEmoregSR$rundescr <- rep("SR", nrow(dfEmoregSR))
# add group variables
dfEmoregSR$group <- ifelse(substr(dfEmoregSR$ID, 2, 2) == 0, "HC", "BPD")
# remove study from pines variable name
names(dfEmoregSR)[2:3] <- c("NegPines", "NeutPines")
# add medication
dfEmoregMed$ID <- substr(dfEmoregMed$ID, 4, 8)
dfEmoregMed$med_bin <- apply(dfEmoregMed[, -1], 1, function(x){if(any(x == 1)){1}else{0}})
dfEmoregAG <- merge(dfEmoregAG, dfEmoregMed[, c("ID", "med_bin")], by = "ID", all.x = T)
dfEmoregRA <- merge(dfEmoregRA, dfEmoregMed[, c("ID", "med_bin")], by = "ID", all.x = T)
dfEmoregSR <- merge(dfEmoregSR, dfEmoregMed[, c("ID", "med_bin")], by = "ID", all.x = T)
# bind emoreg rows
dfEmoreg <- rbind(dfEmoregAG, dfEmoregRA, dfEmoregSR)
# create anonynomous ID
# dfEmoreg$ID <- rep(c(1:(nrow(dfEmoreg)/3)), 3)
dfEmoreg$ID <- as.numeric(as.factor(dfEmoreg$ID))
dfEmoreg
# load data
dfBL <- read.csv("BLpines.csv")
# load data
dfBL <- read.csv("BLpines_neuro.csv")
dfReactMed <- read_excel("Medication_study2_react.xlsx")
# add study and run variables
dfBL$study <- rep("react", nrow(dfBL))
dfBL$run <- rep(1, nrow(dfBL))
dfBL$rundescr <- rep("BL", nrow(dfBL))
# add group variables
group <- substr(dfBL$ID, 1, 1)
dfBL$group <- ifelse(group == 1, "HC", ifelse(group == 2, "BPDacute", "BPDremit"))
# remove study from pines variable name
names(dfBL)[2:3] <- c("NegPines", "NeutPines")
dfBL
# load data
dfER <- read.csv("ERpines_neuro.csv")
# add study and run variaERes
dfER$study <- rep("react", nrow(dfER))
dfER$run <- rep(2, nrow(dfER))
dfER$rundescr <- rep("ER", nrow(dfER))
# add group variaERes
group <- substr(dfER$ID, 1, 1)
dfER$group <- ifelse(group == 1, "HC", ifelse(group == 2, "BPDacute", "BPDremit"))
# remove study from pines variable name
names(dfER)[2:3] <- c("NegPines", "NeutPines")
# load data
dfMX <- read.csv("MXpines.csv")
# load data
dfMX <- read.csv("MXpines_neuro.csv")
# add study and run variaMXes
dfMX$study <- rep("react", nrow(dfMX))
dfMX$run <- rep(3, nrow(dfMX))
dfMX$rundescr <- rep("MX", nrow(dfMX))
# add group variaMXes
group <- substr(dfMX$ID, 1, 1)
dfMX$group <- ifelse(group == 1, "HC", ifelse(group == 2, "BPDacute", "BPDremit"))
# remove study from pines variable name
names(dfMX)[2:3] <- c("NegPines", "NeutPines")
# add medication
dfReactMed$med_bin <- apply(dfReactMed[, -1], 1, function(x){if(any(x == 1)){1}else{0}})
dfBL <- merge(dfBL, dfReactMed[, c("ID", "med_bin")], by = "ID", all.x = T)
dfER <- merge(dfER, dfReactMed[, c("ID", "med_bin")], by = "ID", all.x = T)
dfMX <- merge(dfMX, dfReactMed[, c("ID", "med_bin")], by = "ID", all.x = T)
# bind reactivity rows
dfReact <- rbind(dfBL, dfER, dfMX)
# create anonynomous ID
dfReact$ID <- as.numeric(as.factor(dfReact$ID))
##################
# merge all data
df <- rbind.fill(dfEwmt, dfEmoreg, dfReact)
df$med_bin[is.na(df$med_bin)] <- 0
write.csv(df, "EmoPattern_neuralData.csv", row.names = F)
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#################################################
# load packages and functions
library("here")
library("psych")
library("ggplot2")
library("effectsize")
library("lme4")
library("plyr")
library("meta")
library("metafor")
library("BayesFactor")
library("brms")
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#################################################
# load packages and functions
library("here")
library("psych")
library("ggplot2")
library("effectsize")
library("lme4")
library("plyr")
library("meta")
library("metafor")
library("BayesFactor")
#library("brms")
library("nlme")
library("afex")
install.packages("afex")
library("afex")
library("corrplot")
library("stringr")
source(here::here(wd, "Functions", "AffDysPattern_functions.R"))
dfclin <- read.csv(here::here(wd, "Data", "clinicalPatternExpression", "EmoPattern_neuralData.csv"))
dfclin
# calculate contrasts "negative vs neutral"
df$Pines_Diff <- df$NegPines - df$NeutPines
df$NegPines
df <- read.csv(here::here(wd, "Data", "clinicalPatternExpression", "EmoPattern_neuralData.csv"))
# calculate contrasts "negative vs neutral"
df$Pines_Diff <- df$NegPines - df$NeutPines
df$Pines_Diff
pattern_Diff_Names
# get variable names of difference scores for all patterns
pattern_Diff_Names <- "Pines_Diff"
# ID as factor
df$ID <- as.factor(df$ID)
# remove remitted and trauma control groups and recode group
df <- df[df$group != "TC" & df$group != "BPDremit", ]
df$group <- ifelse(df$group == "HC", "Healthy", "Clinical")
# calculate sample sizes
Nvars <- c("ID", "group", "study")
nrow(unique(df[, Nvars]))
nrow(unique(df[df$group == "Clinical", Nvars]))
nrow(unique(df[df$study == "emoreg", Nvars]))
nrow(unique(df[df$study == "emoreg" & df$group == "Clinical", Nvars]))
nrow(unique(df[df$study == "react", Nvars]))
nrow(unique(df[df$study == "react" & df$group == "Clinical", Nvars]))
nrow(unique(df[df$study == "ewmt", Nvars]))
nrow(unique(df[df$study == "ewmt" & df$group == "Clinical", Nvars]))
# standardize pattern difference scores
for(i in 1:length(pattern_Diff_Names)){
df[, paste0(pattern_Diff_Names[i], "_scalePool")] <- scaleWithinRuns(pattern_Diff_Names[i], design = "between", group_var = "group")
}
# weighted regression effect coding for group
df <- ddply(df, .(study, run), transform, group_weightEff = weightedEffectCoding(group))
pattern_Diff_Names
df
# validate that fixed intercept and intercept variance between studies equal zero
summary(
lmer(
data = df,
Pines_Diff_scalePool ~ 1 + (1|study:ID) + (1|study)
)
)
Pines_Diff_scalePool
# validate that fixed intercept and intercept variance between studies equal zero
summary(
lmer(
data = df,
Pines_Diff_scalePool ~ 1 + (1|study:ID) + (1|study)
)
)
lmer(
data = df,
Pines_Diff_scalePool ~ 1 + (1|study:ID) + (1|study)
)
df
# prepare results df for mega analysis
resultsMEGAbetween <- as.data.frame(
matrix(
nrow = length(pattern_Diff_Names),
ncol = 4))
names(resultsMEGAbetween) <- c("pattern", "estimate", "lb", "ub")
pattern_Diff_Names
# conduct mega analysis on all patterns
for(i in 1:length(pattern_Diff_Names)){
dv <- paste0(pattern_Diff_Names[i], "_scalePool")
f <- as.formula(paste(dv, "0 + group_weightEff + (1|study:ID)", sep = " ~ "))
MEGAbetweenModel <- lmer(
data = df,
formula = f
)
cat("__________________________________________________________________________________\n\n",
"PATTERN: ", pattern_Diff_Names[i], "\n\n\n")
print(summary(MEGAbetweenModel))
print(round(confint(MEGAbetweenModel), 2))
est <- round(summary(MEGAbetweenModel)$coefficients[1], 2)
lb <- round(confint(MEGAbetweenModel)[3, 1], 2)
ub <- round(confint(MEGAbetweenModel)[3, 2], 2)
resultsMEGAbetween[i, ] <- list(pattern_Diff_Names[i], est, lb, ub)
}
oo <- options(repos = "https://cran.r-project.org/")
install.packages("Matrix", type="binary")
install.packages("lme4", type="binary")
options(oo)
Repeatabilit
install.packages("Matrix", type = "binary")
install.packages("lme4", type = "binary")
oo <- options(repos = "https://cran.r-project.org/")
install.packages("Matrix", type="binary")
install.packages("Matrix", type="binary")
install.packages("Matrix", type = "binary")
install.packages("Matrix", type = "binary")
install.packages("Matrix", type = "binary")
install.packages("Matrix", type="binary")
install.packages("lme4", type="binary")
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
#################################################
# load packages and functions
library("here")
library("psych")
library("ggplot2")
library("effectsize")
library("lme4")
library("plyr")
library("meta")
library("metafor")
library("BayesFactor")
#library("brms")
library("nlme")
library("afex")
library("corrplot")
library("stringr")
source(here::here(wd, "Functions", "AffDysPattern_functions.R"))
df <- read.csv(here::here(wd, "Data", "clinicalPatternExpression", "EmoPattern_neuralData.csv"))
#################################################
# prepare variables
# calculate contrasts "negative vs neutral"
df$Pines_Diff <- df$NegPines - df$NeutPines
# get variable names of difference scores for all patterns
pattern_Diff_Names <- "Pines_Diff"
# ID as factor
df$ID <- as.factor(df$ID)
# remove remitted and trauma control groups and recode group
df <- df[df$group != "TC" & df$group != "BPDremit", ]
df$group <- ifelse(df$group == "HC", "Healthy", "Clinical")
# calculate sample sizes
Nvars <- c("ID", "group", "study")
nrow(unique(df[, Nvars]))
nrow(unique(df[df$group == "Clinical", Nvars]))
nrow(unique(df[df$study == "emoreg", Nvars]))
nrow(unique(df[df$study == "emoreg" & df$group == "Clinical", Nvars]))
nrow(unique(df[df$study == "react", Nvars]))
nrow(unique(df[df$study == "react" & df$group == "Clinical", Nvars]))
nrow(unique(df[df$study == "ewmt", Nvars]))
nrow(unique(df[df$study == "ewmt" & df$group == "Clinical", Nvars]))
# standardize pattern difference scores
for(i in 1:length(pattern_Diff_Names)){
df[, paste0(pattern_Diff_Names[i], "_scalePool")] <- scaleWithinRuns(pattern_Diff_Names[i], design = "between", group_var = "group")
}
# weighted regression effect coding for group
df <- ddply(df, .(study, run), transform, group_weightEff = weightedEffectCoding(group))
# validate that fixed intercept and intercept variance between studies equal zero
summary(
lmer(
data = df,
Pines_Diff_scalePool ~ 1 + (1|study:ID) + (1|study)
)
)
# validate that fixed intercept and intercept variance between studies equal zero
summary(
lmer(
data = df,
Pines_Diff_scalePool ~ 1 + (1|study:ID) + (1|study)
)
)
# prepare results df for mega analysis
resultsMEGAbetween <- as.data.frame(
matrix(
nrow = length(pattern_Diff_Names),
ncol = 4))
names(resultsMEGAbetween) <- c("pattern", "estimate", "lb", "ub")
# conduct mega analysis on all patterns
for(i in 1:length(pattern_Diff_Names)){
dv <- paste0(pattern_Diff_Names[i], "_scalePool")
f <- as.formula(paste(dv, "0 + group_weightEff + (1|study:ID)", sep = " ~ "))
MEGAbetweenModel <- lmer(
data = df,
formula = f
)
cat("__________________________________________________________________________________\n\n",
"PATTERN: ", pattern_Diff_Names[i], "\n\n\n")
print(summary(MEGAbetweenModel))
print(round(confint(MEGAbetweenModel), 2))
est <- round(summary(MEGAbetweenModel)$coefficients[1], 2)
lb <- round(confint(MEGAbetweenModel)[3, 1], 2)
ub <- round(confint(MEGAbetweenModel)[3, 2], 2)
resultsMEGAbetween[i, ] <- list(pattern_Diff_Names[i], est, lb, ub)
}
# show  results
resultsMEGAbetween
# plot results
setwd(paste0(wd, "/Figures"))
dfplotMEGAbetween <- resultsMEGAbetween
dfplotMEGAbetween$emotion_label <- factor(c("Negative Affect",  "Amused", "Angry", "Content", "Fearful", "Neutral", "Sad", "Surprised"),
levels = c("Negative Affect", "Fearful", "Angry", "Sad", "Amused", "Content", "Surprised", "Neutral"))
ggplot(data = dfplotMEGAbetween, aes(y = estimate, x = emotion_label)) +
geom_point(size = 3) + geom_errorbar(aes(ymin = lb, ymax = ub)) +
ylab(expression(atop("Pattern Expression", paste("[Cohen's ", italic("d"), ", Emotion Dysregulation - Healthy Controls]")))) + xlab(NULL) +
ylim(-1, 1) +
theme_classic() +
theme(axis.line.x=element_blank(), axis.ticks = element_blank(), axis.title.x=element_blank()) +
geom_segment(aes(x=0,y=0,xend=9,yend=0))
# make dataframe with data for study 1 averaged over runs
dfemoregAgg <- ddply(df[df$study == "emoreg", ], .(ID, group), numcolwise(mean))
dfemoregAgg$run <- rep(1, nrow(dfemoregAgg))
dfemoregAgg$rundescr <- rep("average", nrow(dfemoregAgg))
dfemoregAgg$study <- rep("emoreg", nrow(dfemoregAgg))
dfsingleStudies <- rbind(df[df$study != "emoreg", ], dfemoregAgg[, names(df)])
# prepare loop and results df
studiesRuns <- unique(dfsingleStudies[, c("study", "run")])
studiesRunsResults <- as.data.frame(
matrix(nrow = nrow(studiesRuns)*length(pattern_Diff_Names),
ncol = 7,
dimnames = list(NULL, c("pattern", "study", "run", "cohens_d", "lb", "ub", "BF01"))
)
)
counter = 0
patternHypothesesbetween <- c("higher", "lower", "higher", "lower", "higher", "lower", "higher", "unequal")
# loop through studies/runs
for(i in 1:nrow(studiesRuns)){
# subset study/run
dfsingleStudiesSingle <- dfsingleStudies[dfsingleStudies$study == studiesRuns$study[i] & dfsingleStudies$run == studiesRuns$run[i], ]
# loop through emotion patterns
for(j in 1:length(pattern_Diff_Names)){
counter <- counter + 1
if(patternHypothesesbetween[j] == "higher"){
alternative = c(0, Inf)
}else if(patternHypothesesbetween[j] == "lower"){
alternative = c(-Inf, 0)
}else{
alternative = c(-Inf, Inf)
}
BF <- round(extractBF(ttestBF(dfsingleStudiesSingle[dfsingleStudiesSingle$group == "Clinical", pattern_Diff_Names[j]],
dfsingleStudiesSingle[dfsingleStudiesSingle$group == "Healthy", pattern_Diff_Names[j]],
nullInterval=alternative))[1, "bf"], 2)
BF <- round(1/BF, 2)
cd_model <- cohens_d(dfsingleStudiesSingle[dfsingleStudiesSingle$group == "Clinical", pattern_Diff_Names[j]],
dfsingleStudiesSingle[dfsingleStudiesSingle$group == "Healthy", pattern_Diff_Names[j]])
cd <- as.numeric(round(cd_model$Cohens_d, 2))
lb <- round(cd_model$CI_low, 2)
ub <- round(cd_model$CI_high, 2)
results <- c(pattern_Diff_Names[j],
studiesRuns$study[i],
studiesRuns$run[i],
cd,
lb,
ub,
BF)
studiesRunsResults[counter, ] <- results
}
}
studiesRunsResults
# short df
dfreact <- df[df$study == "react", ]
# prepare loop and results df
studiesRunsResultsReact <- as.data.frame(
matrix(nrow = length(pattern_Diff_Names),
ncol = 7,
dimnames = list(NULL, c("pattern", "study", "run", "cohens_d", "lb", "ub", "BF01"))
)
)
for(i in 1:length(pattern_Diff_Names)){
dv <- paste0(pattern_Diff_Names[i], "_scalePool")
f <- as.formula(paste(dv, "0 + group_weightEff + (1|ID)", sep = " ~ "))
model.react <- lmer(formula = f, data = dfreact)
cd <- round(summary(model.react)$coefficients[1], 2)
lb <- round(confint(model.react)[3, 1], 2)
ub <- round(confint(model.react)[3, 2], 2)
results <- c(pattern_Diff_Names[i],
"react",
1,
cd,
lb,
ub,
NA)
studiesRunsResultsReact[i, ] <- results
}
studiesRunsResultsReact
# merge results with results from the two other studies
dfMainResultsBetween <- rbind(studiesRunsResults[studiesRunsResults$study != "react", ], studiesRunsResultsReact)
dfMainResultsBetween$cohens_d <- as.numeric(dfMainResultsBetween$cohens_d)
dfMainResultsBetween$lb <- as.numeric(dfMainResultsBetween$lb)
dfMainResultsBetween$ub <- as.numeric(dfMainResultsBetween$ub)
dfMainResultsBetween$emotion_label <- factor(rep(c("Negative Affect",  "Amused", "Angry", "Content", "Fearful", "Neutral", "Sad", "Surprised"), 3),
levels = c("Negative Affect", "Fearful", "Angry", "Sad", "Amused", "Content", "Surprised", "Neutral"))
dfMainResultsBetween <- dfMainResultsBetween[, -c(3, 7)]
dfMainResultsBetween$study <- ifelse(dfMainResultsBetween$study == "emoreg", "Study 1",
ifelse(dfMainResultsBetween$study == "react", "Study 2",
"Study 3"))
studiesRunsResults
df[df$study == "ewmt", "Pines_Diff"]
hist(df[df$study == "ewmt", "Pines_Diff"])
df
plot(df[df$study == "ewmt", "NegPines"], df[df$study == "ewmt", "NeutPines"])
abline(a = 0, b = 1, col = "red")
